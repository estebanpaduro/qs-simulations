[[model]]
nombre: HH equation

#Valores Iniciales

INA.m = 0.0529
IK.n = 0.3176
INA.h = 0.5960
membrane.V = -65.005

[environment]
t = 0 bind time
    in [ms]

#Potencial de membrana
[membrane]
C_M = 1 [uA/cm^2]
dot(V) = (1/C_M) * (-IK.i_k - INA.i_na - IL.i_l + ST.stim) 
    in [mV]
 
#Corriente de Canal de Potasio (factor n^4)   
[IK]
use membrane.V as V
g_bar_k = 36 [ms/cm^3]
V_k = -77 [mV]
i_k = g_bar_k * n^4 *(V - V_k)
    in [uA/cm^2]
dot(n) = alpha * (1-n) - beta * n
    alpha = (0.01 * (V + 55))/(1-exp(-(V + 55)/10))
    beta = 0.125 * exp(-(V + 65)/80)
  
#Corriente de Canal de Sodio (factor m^3h)    
[INA]
use membrane.V as V
g_bar_na = 120 [ms/cm^3]
V_na = 50 [mV]
i_na = g_bar_na * m^3*h *(V - V_na)
    in [uA/cm^2]
dot(m) = alpha * (1-m) - beta * m
    alpha = (0.1 * (V + 40))/(1-exp(-(V + 40)/10))
    beta = 4 * exp(-(V + 65)/18)

dot(h) = alpha * (1-h) - beta * h
    
    alpha = 0.07 * exp(-(V + 65)/20)
    beta = 1/(1 + exp(-(V + 35)/10))
    
#Corriente de Fuga ( sin n, m, h)
[IL]
use membrane.V as V
g_bar_l = 0.3 [ms/cm^3]
V_l = -54.4 [mV]
i_l = g_bar_l * (V - V_l)
    in [uA/cm^2]
    
 #Estimulo
[ST]
use membrane.V as V
use environment.t as t
stim = 0
    in [uA/cm^2]


     
[prob]

use environment.t as t
c_na = (INA.m)^3 * INA.h
c_k = (IK.n)^4

[[protocol]]
# Level  Start    Length   Period   Multiplier

[[script]]
import matplotlib.pyplot as plt
import myokit
import numpy as np

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(200)

# Display the results

var = next(m.states()).qname()
plt.figure()
x=[]
for i in d['membrane.V']:
    x_1 = i- 80
    x.append(x_1)
plt.plot(d['environment.t'], x)
plt.title(var)
plt.show()




#import matplotlib.pyplot as plt
#import myokit
#import numpy as np


#def simulation(model,protocol, time):
 #   t_max = time
  #  times = np.arange(0, t_max, 0.1)
   # sim = myokit.Simulation(model, protocol)
    #log = sim.run(t_max, log_times=times)
    #return sim, log

# Get model and protocol, create simulation#
#m = myokit.load_model('AHH.mmt')
#p = myokit.load_protocol('AHH.mmt')
#sim, d =simulation(m,p,100)
#x=[]
#plt.figure(figsize = (16,5))
#for i in d['membrane.V']:
 #   x_1 = i- 80
  #  x.append(x_1)#
#plt.plot(d['environment.t'], x)
#plt.title('V_m = V - V_{rest}')
#plt.show()

